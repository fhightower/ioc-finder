{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"IOC Finder","text":"<p>Welcome to the documentation for the <code>ioc-finder</code> library - a library to find different types of indicators of compromise (a.k.a observables) and data pertinent to indicators of compromise!</p> <p>\ud83d\udce2 Announcement: I'm looking for sponsorship for this project. I have a number of improvements and helpful features I'd like to add, but need some support to continue working on this project. If you use this project for work and/or find it useful, please consider contributing even a small amount. Thanks!</p>"},{"location":"#quick-start","title":"Quick-Start","text":"<p>Install ioc-finder:</p> <pre><code>pip install ioc-finder\n</code></pre> <p>Use it:</p> <pre><code>from ioc_finder import find_iocs\n\ntext = \"\"\n\niocs = find_iocs(text)\niocs['domains']\niocs['urls']\n</code></pre>"},{"location":"#overview-interactive","title":"Overview (INTERACTIVE!)","text":"<p>Enter some text with IOCs here and click \"Parse IOCs\" to see how ioc-finder parses IOCs. Click \"Reload\"</p> Test 1, 2, 3 foobar.com https://example.org/test/bingo.php  1.1.1.1    2.2.2.2222 <p>\u231b Reload </p> <p>The code above uses Pyodide to provide a Python3.9 runtime in the browser using WebAssembly. Enjoy!</p>"},{"location":"#capabilities","title":"Capabilities","text":"Data types found by ioc-finder <ul> <li>Autonomous System Numbers (ASNs) (in multiple formats such as <code>asn1234</code> and <code>as 1234</code>)</li> <li>Bitcoin addresses (P2PKH, P2SH, and Bech32)</li> <li>CIDR ranges (currently ipv4 ranges; ipv6 ranges coming soon)</li> <li>CVEs (e.g. <code>CVE-2014-1234</code>)</li> <li>Domain names (support for Unicode domain names (e.g. <code>\u0229xample.com</code>) is coming soon)</li> <li>Email addresses (both standard format (e.g. <code>test@example.com</code>) and an email with an IP address as the domain (e.g. <code>test@[192.168.0.1]</code>))</li> <li>File hashes (md5, sha1, sha256, sha512, and import hashes, and authentihashes)</li> <li>File paths (beta)</li> <li>Google Adsense Publisher IDs</li> <li>Google Analytics Tracker IDs</li> <li>IP address (IPv4 and IPv6)</li> <li>MAC addresses (beta)</li> <li>Monero (crypto-currency) addresses</li> <li>Registry key paths (e.g. <code>\"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows</code>)</li> <li>SSDeep hashes (beta)</li> <li>URLs (URLs with and without schemes)</li> <li>User agents (beta)</li> <li>XMPP addresses (basically, this captures email addresses whose domain names contain \"jabber\" or \"xmpp\")</li> <li>MITRE ATT&amp;CK data (see more info)*:<ul> <li>Pre-attack tactics and techniques (and sub-techniques)</li> <li>Enterprise mitigations, tactics, and techniques (and sub-techniques)</li> <li>Mobile mitigations, tactics, and techniques (and sub-techniques)</li> </ul> </li> <li>TLP labels</li> </ul> <p>Have another data-type you would like ioc-finder to parse? Raise an issue and we'll see what we can do!</p> Configuration Options <p>This library also provides options to:</p> <ul> <li>Parse domain name from a URL</li> <li>Parse domain name from an email address</li> <li>Parse IP address from a CIDR range</li> <li>Parse URLs without a scheme (e.g. without <code>https://</code>)</li> <li>Parse import hashes and authentihashes</li> </ul> Known Limitations <ul> <li>When parsing registry key paths, this library will NOT properly parse a registry key path where the last section contains a space. For example, <code>&lt;HKCU&gt;\\software\\microsoft\\windows\\currentversion\\explorer\\advanced on</code> will be parsed as <code>&lt;HKCU&gt;\\software\\microsoft\\windows\\currentversion\\explorer\\advanced</code> (the space in the final section is removed).</li> <li>The items listed above (in the \"Capabilities\" section) that are postceded by \"(beta)\" are not very robust and may still have major issues. Any feedback or issues related to these items are much appreciated.</li> <li>When parsing markdown, if there is a domain name that is surrounded by underscores (which would make the domain name italic in some flavours of markdown - e.g. <code>_google.com_</code>), the domain will be parsed including the leading underscore (e.g. <code>_google.com_</code> would be parsed as <code>_google.com</code>).</li> </ul>"},{"location":"#feedback","title":"Feedback","text":"<p>If you have any ideas to improve this package, please raise an issue!</p>"},{"location":"#other-helpful-projects","title":"Other Helpful Projects","text":"<p>You may also be interested in https://github.com/ioc-fang/ioc_fanger, a project to fang and defang indicators of compromise. For example,</p> <p>defanging:</p> <pre><code>example.com =&gt; example[.]com\nhttps://example.com =&gt; hXXps://example[.]com\n</code></pre> <p>and fanging:</p> <pre><code>example[.]com =&gt; example.com\nexample(.)com =&gt; example.com\nme AT example(.)com =&gt; me@example.com\n</code></pre>"},{"location":"#credits","title":"Credits","text":"<p>This project uses the ioc_fanger package to make sure that all indicators in the text are properly fanged.</p> <p>This package was created with Cookiecutter and Floyd Hightower's python-project-template project template.</p> <p>* MITRE data is \u00a9 2021 The MITRE Corporation. This work is reproduced and distributed with the permission of The MITRE Corporation. (View the MITRE data's full license)</p>"},{"location":"development/","title":"Development Guide \ud83d\udc33","text":"<p>This page shows you how to test, lint, and explore the ioc-finder. As always, if you have feedback, please raise an issue and we'll be happy to improve our docs. Thanks!</p>"},{"location":"development/#prerequisites","title":"Prerequisites","text":"<p>If you want to test, lint, or explore ioc-finder, make sure you have docker and docker-compose installed (if you don't see: installing docker).</p> <p>Then you can use the <code>test</code>, <code>lint</code>, and <code>dev</code> docker compose services listed below!</p>"},{"location":"development/#test-ioc-finder","title":"Test ioc-finder \ud83e\uddea","text":"<p>To test ioc-finder, run the following command from the root directory of the project:</p> <pre><code>docker-compose run --rm test\n</code></pre> <p>Typically, this command will run pytest on the project's test suite. To view the details of what this command does, take a look at the <code>test</code> service in the project's <code>docker-compose.yml</code> file.</p>"},{"location":"development/#understanding-our-testing-framework","title":"Understanding our Testing Framework","text":"<p>There are two types of tests in the <code>ioc-finder/tests/</code> directory:</p> <ol> <li>Standard tests in test_*.py files</li> <li>Tests run by <code>ioc-finder/tests/test_find_iocs.py</code></li> </ol> <p>In this section of the documentation, we'll discuss the second set of tests (those run by <code>ioc-finder/tests/test_find_iocs.py</code>).</p> <p>In the <code>ioc-finder/tests/find_iocs_cases</code> dir, there are files which define test cases with an input and expected output for different types of observables (a.k.a. indicators).</p> <p>A test case is a <code>pytest.param</code> object that takes these arguments:</p> <ul> <li>The input to the <code>ioc_finder.find_iocs</code> function (a string)</li> <li>The expected output from the <code>ioc_finder.find_iocs</code> function (a dict)</li> <li>(Optional) Kwargs for the <code>ioc_finder.find_iocs</code> function (a dict)</li> <li>The <code>id</code> kwarg providing a name for the test (a string)</li> </ul> <p>An example looks like:</p> <pre><code>from pytest import param\n\nparam('as1234', {'asns': ['ASN1234']}, {}, id=\"asn_1\")\n</code></pre> <p><code>ioc-finder/tests/test_find_iocs.py</code> collects data from the <code>ioc-finder/tests/find_iocs_cases/</code> dir and runs tests to make sure the <code>find_iocs</code> function returns the expected data.</p>"},{"location":"development/#lint-ioc-finder","title":"Lint ioc-finder \ud83e\uddf9","text":"<p>To lint ioc-finder, run the following command from the root directory of the project:</p> <pre><code>docker-compose run --rm lint\n</code></pre> <p>Typically, this command will run a number of linters on the project's code with the goal of improving code qality and catching bugs before they are released (you can read more about the benefits of linting here). To view the details of what this command does, take a look at the <code>lint</code> service in the project's <code>docker-compose.yml</code> file.</p>"},{"location":"development/#explore-ioc-finder","title":"Explore ioc-finder \ud83d\udd2d","text":"<p>To explore ioc-finder, you can drop into a \"dev\" environment which is an IPython shell with the project and all its requirements loaded. To do this, run the following command from the root directory of the project:</p> <pre><code>docker-compose run --rm dev\n</code></pre> <p>To see what this command does, take a look at the <code>dev</code> service in the project's <code>docker-compose.yml</code> file.</p>"},{"location":"development/#run-docs-locally","title":"Run Docs Locally \ud83d\udcd6","text":"<p>To view the docs for ioc-finder locally, run the following command from the root directory of the project:</p> <pre><code>docker-compose run --rm mkdocs\n</code></pre> <p>This will serve the documentation at <code>http://localhost:8000</code>.</p>"},{"location":"development/#questions-please-ask","title":"Questions? Please Ask!","text":"<p>If you have any follow-up questions, don't hesitate to ask! It takes practice to understand how to contribute to open-source software, so there is no shame in asking for help.</p>"},{"location":"quick-start/","title":"Quick Start","text":""},{"location":"quick-start/#installation","title":"Installation","text":"<p>The recommended means of installation is using pip:</p> <p><code>pip install ioc-finder</code></p> <p>Alternatively, you can install ioc-finder as follows:</p> <pre><code>git clone git@github.com:fhightower/ioc-finder.git &amp;&amp; cd ioc-finder;\npython setup.py install --user;\n</code></pre>"},{"location":"quick-start/#usage","title":"Usage","text":"<p>This package can be used in python or via a command-line interface.</p>"},{"location":"quick-start/#python","title":"Python","text":"<p>The primary function in this package is the <code>ioc_finder.find_iocs()</code> function. A simple usage looks like:</p> <pre><code>from ioc_finder import find_iocs\n\ntext = \"This is just an example.com https://example.org/test/bingo.php\"\niocs = find_iocs(text)\n\nprint('Domains: {}'.format(iocs['domains']))\nprint('URLs: {}'.format(iocs['urls']))\n</code></pre>"},{"location":"quick-start/#inputs","title":"Inputs","text":"<p>You must pass some text into the <code>find_iocs()</code> function as string (the iocs will be parsed from this text). You can also provide the options detailed below.</p>"},{"location":"quick-start/#options","title":"Options","text":"<p>The <code>find_iocs</code> takes the following keywords (all of them default to <code>True</code>):</p> <ul> <li><code>parse_domain_from_url</code> (default=True): Whether or not to parse domain names from URLs (e.g. <code>example.com</code> from <code>https://example.com/test</code>)</li> <li><code>parse_from_url_path</code> (default=True): Whether or not to parse observables from URL paths (e.g. <code>2f3ec0e4998909bb0efab13c82d30708ca9f88679e42b75ef13ea0466951d862</code> from <code>https://www.virustotal.com/gui/file/2f3ec0e4998909bb0efab13c82d30708ca9f88679e42b75ef13ea0466951d862/detection</code>)</li> <li><code>parse_domain_from_email_address</code> (default=True): Whether or not to parse domain names from email addresses (e.g. <code>example.com</code> from <code>foo@example.com</code>)</li> <li><code>parse_address_from_cidr</code> (default=True): Whether or not to parse IP addresses from CIDR ranges (e.g. <code>0.0.0.1</code> from <code>0.0.0.1/24</code>)</li> <li><code>parse_urls_without_scheme</code> (default=True): Whether or not to parse URLs without a scheme (see https://en.wikipedia.org/wiki/Uniform_Resource_Identifier#Generic_syntax) (e.g. <code>hightower.space/projects</code>)</li> <li><code>parse_imphashes</code> (default=True): Parse import hashes (which look like md5s, but are preceded by 'imphash' or 'import hash')</li> <li><code>parse_authentihashes</code> (default=True): Parse authentihashes (which look like sha256s, but are preceded with 'authentihash')</li> </ul> <p>See test_ioc_finder.py for more examples.</p>"},{"location":"quick-start/#output","title":"Output","text":"<p>The <code>find_iocs()</code> returns a dictionary in the following structure:</p> <pre><code>{\n    \"asns\": [],\n    \"attack_mitigations\": {\n        \"enterprise\": [],\n        \"mobile\": []\n    },\n    \"attack_tactics\": {\n        \"enterprise\": [],\n        \"mobile\": [],\n        \"pre_attack\": []\n    },\n    \"attack_techniques\": {\n        \"enterprise\": [],\n        \"mobile\": [],\n        \"pre_attack\": []\n    },\n    \"authentihashes\": [],\n    \"bitcoin_addresses\": [],\n    \"cves\": [],\n    \"domains\": [],\n    \"email_addresses\": [],\n    \"email_addresses_complete\": [],\n    \"file_paths\": [],\n    \"google_adsense_publisher_ids\": [],\n    \"google_analytics_tracker_ids\": [],\n    \"imphashes\": [],\n    \"ipv4_cidrs\": [],\n    \"ipv4s\": [],\n    \"ipv6s\": [],\n    \"mac_addresses\": [],\n    \"md5s\": [],\n    \"monero_addresses\": [],\n    \"registry_key_paths\": [],\n    \"sha1s\": [],\n    \"sha256s\": [],\n    \"sha512s\": [],\n    \"ssdeeps\": [],\n    \"tlp_labels\": [],\n    \"urls\": [],\n    \"user_agents\": [],\n    \"xmpp_addresses\": []\n}\n</code></pre> <p>For example, running the example code shown at the start of the usage section above produces the following output:</p> <pre><code>{\n    \"asns\": [],\n    \"attack_mitigations\": {\n        \"enterprise\": [],\n        \"mobile\": []\n    },\n    \"attack_tactics\": {\n        \"enterprise\": [],\n        \"mobile\": [],\n        \"pre_attack\": []\n    },\n    \"attack_techniques\": {\n        \"enterprise\": [],\n        \"mobile\": [],\n        \"pre_attack\": []\n    },\n    \"authentihashes\": [],\n    \"bitcoin_addresses\": [],\n    \"cves\": [],\n    \"domains\": [\"example.org\", \"example.com\"],\n    \"email_addresses\": [],\n    \"email_addresses_complete\": [],\n    \"file_paths\": [],\n    \"google_adsense_publisher_ids\": [],\n    \"google_analytics_tracker_ids\": [],\n    \"imphashes\": [],\n    \"ipv4_cidrs\": [],\n    \"ipv4s\": [],\n    \"ipv6s\": [],\n    \"mac_addresses\": [],\n    \"md5s\": [],\n    \"monero_addresses\": [],\n    \"registry_key_paths\": [],\n    \"sha1s\": [],\n    \"sha256s\": [],\n    \"sha512s\": [],\n    \"ssdeeps\": [],\n    \"tlp_labels\": [],\n    \"urls\": [\"https://example.org/test/bingo.php\"],\n    \"user_agents\": [],\n    \"xmpp_addresses\": []\n}\n</code></pre>"},{"location":"quick-start/#output-details","title":"Output Details","text":"<p>There are two grammars for email addresses. There is a fairly complete grammar to find email addresses matching the spec (which is very broad). Any of these complete email addresses (e.g. <code>foo\"bar@gmail.com</code>) will be sent as output to in <code>email_addresses_complete</code> key.</p> <p>Email addresses in the simple form we are familiar with (e.g. <code>bar@gmail.com</code>) will be sent as output in the <code>email_addresses</code> key.</p>"},{"location":"quick-start/#parsing-specific-indicator-types","title":"Parsing Specific Indicator Types","text":"<p>If you need to parse a specific indicator type, you can do this using one of the parse functions that start with <code>parse_</code>. For example, the code below will parse URLs:</p> <pre><code>from ioc_finder import parse_urls\n\ntext = 'https://google.com'\nresults = parse_urls(prepare_text(text))\nprint(results)\n</code></pre> <p>If you use a parse function for a specific indicator type, we recommend that you first call the <code>prepare_text</code> function which fangs (e.g. <code>hXXps://example[.]com</code> =&gt; <code>https://example.com</code>) the text before parsing indicators from it. In the future, more functionality will be added to the <code>prepare_text</code> function making it advantageous to call this function before parsing indicators.</p>"},{"location":"quick-start/#command-line-interface","title":"Command-Line Interface","text":"<p>The ioc-finder package can be used from a command line like:</p> <pre><code>ioc-finder \"This is just an example.com https://example.org/test/bingo.php\"\n</code></pre> <p>This will return:</p> <pre><code>{\n    \"asns\": [],\n    \"attack_mitigations\": {\n        \"enterprise\": [],\n        \"mobile\": []\n    },\n    \"attack_tactics\": {\n        \"enterprise\": [],\n        \"mobile\": [],\n        \"pre_attack\": []\n    },\n    \"attack_techniques\": {\n        \"enterprise\": [],\n        \"mobile\": [],\n        \"pre_attack\": []\n    },\n    \"authentihashes\": [],\n    \"bitcoin_addresses\": [],\n    \"cves\": [],\n    \"domains\": [\n        \"example.com\",\n        \"example.org\"\n    ],\n    \"email_addresses\": [],\n    \"email_addresses_complete\": [],\n    \"file_paths\": [],\n    \"google_adsense_publisher_ids\": [],\n    \"google_analytics_tracker_ids\": [],\n    \"imphashes\": [],\n    \"ipv4_cidrs\": [],\n    \"ipv4s\": [],\n    \"ipv6s\": [],\n    \"mac_addresses\": [],\n    \"md5s\": [],\n    \"monero_addresses\": [],\n    \"registry_key_paths\": [],\n    \"sha1s\": [],\n    \"sha256s\": [],\n    \"sha512s\": [],\n    \"ssdeeps\": [],\n    \"tlp_labels\": [],\n    \"urls\": [\n        \"https://example.org/test/bingo.php\"\n    ],\n    \"user_agents\": [],\n    \"xmpp_addresses\": []\n}\n</code></pre> <p>Here are the usage instructions for the CLI:</p> <pre><code>Usage: ioc-finder [OPTIONS] TEXT\n\n  CLI interface for parsing indicators of compromise.\n\nOptions:\n  --no_url_domain_parsing         Using this flag will not parse domain names\n                                  from URLs\n  --no_email_addr_domain_parsing  Using this flag will not parse domain names\n                                  from email addresses\n  --no_cidr_address_parsing       Using this flag will not parse IP addresses\n                                  from CIDR ranges\n  --no_xmpp_addr_domain_parsing   Using this flag will not parse domain names\n                                  from XMPP addresses\n  --help                          Show this message and exit.\n</code></pre>"}]}